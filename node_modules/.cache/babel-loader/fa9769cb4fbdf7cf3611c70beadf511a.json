{"ast":null,"code":"import { createStore } from \"redux\";\nimport { configureStore, createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  counter: 0,\n  showCounter: true\n};\nconst ininitalAuthState = {\n  isAuthenticated: false\n};\nconst counterSlice = createSlice({\n  name: \"counter\",\n  initialState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n\n    decrement(state) {\n      state.counter--;\n    },\n\n    increase(state, action) {\n      state.counter = state.counter + action.payload;\n    },\n\n    toggle(state) {\n      state.showCounter = !state.showCounter;\n    }\n\n  }\n});\nconst authSlice = createSlice({\n  name: \"user\",\n  initialState: ininitalAuthState,\n  reducers: {\n    login(state) {\n      state.isAuthenticated = true;\n    },\n\n    logout(state) {\n      state.isAuthenticated = false;\n    }\n\n  }\n}); // ----------Below is using Redux itself.\n//\n// const counterReducer = (state = initialState, action) => {\n//   if (action.type === \"INCREMENT\") {\n//     return {\n//       counter: state.counter + 1,\n//       showCounter: state.showCounter,\n//     };\n//   }\n//   if (action.type === \"DECREMENT\") {\n//     return {\n//       counter: state.counter - 1,\n//       showCounter: state.showCounter,\n//     };\n//   }\n//   if (action.type === \"increase\") {\n//     return {\n//       counter: state.counter + action.amount,\n//       showCounter: state.showCounter,\n//     };\n//   }\n//   if (action.type === \"toggle\") {\n//     return {\n//       counter: state.counter,\n//       showCounter: !state.showCounter,\n//     };\n//   }\n//   return state;\n// };\n// const store = createStore(counterReducer);\n// export default store;\n//\n//------------------------------------------\n\nconst store = configureStore({\n  reducer: {\n    counter: counterSlice.reducer,\n    auth: authSlice.reducer\n  }\n});\nexport const counterAction = counterSlice.actions;\nexport const authAction = authSlice.actions;\nexport default store;","map":{"version":3,"names":["createStore","configureStore","createSlice","initialState","counter","showCounter","ininitalAuthState","isAuthenticated","counterSlice","name","reducers","increment","state","decrement","increase","action","payload","toggle","authSlice","login","logout","store","reducer","auth","counterAction","actions","authAction"],"sources":["C:/Users/jason123/Documents/reactFolder/reduxDemo/src/store/index.js"],"sourcesContent":["import { createStore } from \"redux\";\r\nimport { configureStore, createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = { counter: 0, showCounter: true };\r\nconst ininitalAuthState = { isAuthenticated: false };\r\n\r\nconst counterSlice = createSlice({\r\n  name: \"counter\",\r\n  initialState,\r\n  reducers: {\r\n    increment(state) {\r\n      state.counter++;\r\n    },\r\n    decrement(state) {\r\n      state.counter--;\r\n    },\r\n    increase(state, action) {\r\n      state.counter = state.counter + action.payload;\r\n    },\r\n    toggle(state) {\r\n      state.showCounter = !state.showCounter;\r\n    },\r\n  },\r\n});\r\n\r\nconst authSlice = createSlice({\r\n  name: \"user\",\r\n  initialState: ininitalAuthState,\r\n  reducers: {\r\n    login(state) {\r\n      state.isAuthenticated = true;\r\n    },\r\n    logout(state) {\r\n      state.isAuthenticated = false;\r\n    },\r\n  },\r\n});\r\n\r\n// ----------Below is using Redux itself.\r\n//\r\n// const counterReducer = (state = initialState, action) => {\r\n//   if (action.type === \"INCREMENT\") {\r\n//     return {\r\n//       counter: state.counter + 1,\r\n//       showCounter: state.showCounter,\r\n//     };\r\n//   }\r\n//   if (action.type === \"DECREMENT\") {\r\n//     return {\r\n//       counter: state.counter - 1,\r\n//       showCounter: state.showCounter,\r\n//     };\r\n//   }\r\n\r\n//   if (action.type === \"increase\") {\r\n//     return {\r\n//       counter: state.counter + action.amount,\r\n//       showCounter: state.showCounter,\r\n//     };\r\n//   }\r\n\r\n//   if (action.type === \"toggle\") {\r\n//     return {\r\n//       counter: state.counter,\r\n//       showCounter: !state.showCounter,\r\n//     };\r\n//   }\r\n\r\n//   return state;\r\n// };\r\n\r\n// const store = createStore(counterReducer);\r\n\r\n// export default store;\r\n//\r\n//------------------------------------------\r\n\r\nconst store = configureStore({\r\n  reducer: { counter: counterSlice.reducer, auth: authSlice.reducer },\r\n});\r\n\r\nexport const counterAction = counterSlice.actions;\r\nexport const authAction = authSlice.actions;\r\n\r\nexport default store;\r\n"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,cAAT,EAAyBC,WAAzB,QAA4C,kBAA5C;AAEA,MAAMC,YAAY,GAAG;EAAEC,OAAO,EAAE,CAAX;EAAcC,WAAW,EAAE;AAA3B,CAArB;AACA,MAAMC,iBAAiB,GAAG;EAAEC,eAAe,EAAE;AAAnB,CAA1B;AAEA,MAAMC,YAAY,GAAGN,WAAW,CAAC;EAC/BO,IAAI,EAAE,SADyB;EAE/BN,YAF+B;EAG/BO,QAAQ,EAAE;IACRC,SAAS,CAACC,KAAD,EAAQ;MACfA,KAAK,CAACR,OAAN;IACD,CAHO;;IAIRS,SAAS,CAACD,KAAD,EAAQ;MACfA,KAAK,CAACR,OAAN;IACD,CANO;;IAORU,QAAQ,CAACF,KAAD,EAAQG,MAAR,EAAgB;MACtBH,KAAK,CAACR,OAAN,GAAgBQ,KAAK,CAACR,OAAN,GAAgBW,MAAM,CAACC,OAAvC;IACD,CATO;;IAURC,MAAM,CAACL,KAAD,EAAQ;MACZA,KAAK,CAACP,WAAN,GAAoB,CAACO,KAAK,CAACP,WAA3B;IACD;;EAZO;AAHqB,CAAD,CAAhC;AAmBA,MAAMa,SAAS,GAAGhB,WAAW,CAAC;EAC5BO,IAAI,EAAE,MADsB;EAE5BN,YAAY,EAAEG,iBAFc;EAG5BI,QAAQ,EAAE;IACRS,KAAK,CAACP,KAAD,EAAQ;MACXA,KAAK,CAACL,eAAN,GAAwB,IAAxB;IACD,CAHO;;IAIRa,MAAM,CAACR,KAAD,EAAQ;MACZA,KAAK,CAACL,eAAN,GAAwB,KAAxB;IACD;;EANO;AAHkB,CAAD,CAA7B,C,CAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;;AAEA,MAAMc,KAAK,GAAGpB,cAAc,CAAC;EAC3BqB,OAAO,EAAE;IAAElB,OAAO,EAAEI,YAAY,CAACc,OAAxB;IAAiCC,IAAI,EAAEL,SAAS,CAACI;EAAjD;AADkB,CAAD,CAA5B;AAIA,OAAO,MAAME,aAAa,GAAGhB,YAAY,CAACiB,OAAnC;AACP,OAAO,MAAMC,UAAU,GAAGR,SAAS,CAACO,OAA7B;AAEP,eAAeJ,KAAf"},"metadata":{},"sourceType":"module"}